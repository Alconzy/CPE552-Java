0

t1: add 1
read 0
+1 --> write back --> 1

t2: sub 1
read 0

t2: sub 1
1 - 1 = 0
write back

t1: add 1
read 1
1 + 1 = 2
write back






java.lang.Thread

Thread t = new Thread() {
  public void run() {

  }
}

t.start();

Thread t = new Thread(runnable)

public interface Runnable {
  public void run();
}

public class A {

  public synchronized void f() {} // wait until each thread is done (take turns)
  public synchronized void g() {} // wait until each thread is done (take turns)

  public void h() {
    statement;
    statement;
    synchronized(this) { // a thread can be in f, g , or here
      // critical section
    }

  }
}

deadlock: when thread a acquires lock 1, then tries to acquire lock 2
thread b acquires lock 2, then tries to acquire lock 1

class B {
  private Object lock1 = new Object(), lock2 = new Object();
  void f() {
     synchronized(lock1) {
         synchronized(lock2) {
            // in here, you got both lock1, lock2
         }
     }



  }


}


















